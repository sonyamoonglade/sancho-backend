// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storages/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sonyamoonglade/sancho-backend/internal/domain"
	dto "github.com/sonyamoonglade/sancho-backend/internal/services/dto"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockProduct) Approve(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockProductMockRecorder) Approve(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockProduct)(nil).Approve), ctx, productID)
}

// Delete mocks base method.
func (m *MockProduct) Delete(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductMockRecorder) Delete(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProduct)(nil).Delete), ctx, productID)
}

// Disapprove mocks base method.
func (m *MockProduct) Disapprove(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disapprove", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disapprove indicates an expected call of Disapprove.
func (mr *MockProductMockRecorder) Disapprove(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disapprove", reflect.TypeOf((*MockProduct)(nil).Disapprove), ctx, productID)
}

// GetAll mocks base method.
func (m *MockProduct) GetAll(ctx context.Context) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProduct)(nil).GetAll), ctx)
}

// GetAllCategories mocks base method.
func (m *MockProduct) GetAllCategories(ctx context.Context, sorted bool) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx, sorted)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockProductMockRecorder) GetAllCategories(ctx, sorted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockProduct)(nil).GetAllCategories), ctx, sorted)
}

// GetByID mocks base method.
func (m *MockProduct) GetByID(ctx context.Context, productID string) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, productID)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductMockRecorder) GetByID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProduct)(nil).GetByID), ctx, productID)
}

// GetByIDs mocks base method.
func (m *MockProduct) GetByIDs(ctx context.Context, ids []string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockProductMockRecorder) GetByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockProduct)(nil).GetByIDs), ctx, ids)
}

// GetCategoryByName mocks base method.
func (m *MockProduct) GetCategoryByName(ctx context.Context, categoryName string) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", ctx, categoryName)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockProductMockRecorder) GetCategoryByName(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockProduct)(nil).GetCategoryByName), ctx, categoryName)
}

// Save mocks base method.
func (m *MockProduct) Save(ctx context.Context, product domain.Product) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, product)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockProductMockRecorder) Save(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProduct)(nil).Save), ctx, product)
}

// Update mocks base method.
func (m *MockProduct) Update(ctx context.Context, dto dto.UpdateProductDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductMockRecorder) Update(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProduct)(nil).Update), ctx, dto)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetAdminByLogin mocks base method.
func (m *MockUser) GetAdminByLogin(ctx context.Context, login string) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByLogin", ctx, login)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByLogin indicates an expected call of GetAdminByLogin.
func (mr *MockUserMockRecorder) GetAdminByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByLogin", reflect.TypeOf((*MockUser)(nil).GetAdminByLogin), ctx, login)
}

// GetAdminByRefreshToken mocks base method.
func (m *MockUser) GetAdminByRefreshToken(ctx context.Context, adminID, token string) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByRefreshToken", ctx, adminID, token)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByRefreshToken indicates an expected call of GetAdminByRefreshToken.
func (mr *MockUserMockRecorder) GetAdminByRefreshToken(ctx, adminID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByRefreshToken", reflect.TypeOf((*MockUser)(nil).GetAdminByRefreshToken), ctx, adminID, token)
}

// SaveAdmin mocks base method.
func (m *MockUser) SaveAdmin(ctx context.Context, admin domain.Admin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAdmin", ctx, admin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAdmin indicates an expected call of SaveAdmin.
func (mr *MockUserMockRecorder) SaveAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAdmin", reflect.TypeOf((*MockUser)(nil).SaveAdmin), ctx, admin)
}

// SaveCustomer mocks base method.
func (m *MockUser) SaveCustomer(ctx context.Context, customer domain.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCustomer indicates an expected call of SaveCustomer.
func (mr *MockUserMockRecorder) SaveCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCustomer", reflect.TypeOf((*MockUser)(nil).SaveCustomer), ctx, customer)
}

// SaveSession mocks base method.
func (m *MockUser) SaveSession(ctx context.Context, dto dto.SaveSessionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockUserMockRecorder) SaveSession(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockUser)(nil).SaveSession), ctx, dto)
}

// SaveWorker mocks base method.
func (m *MockUser) SaveWorker(ctx context.Context, worker domain.Worker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWorker", ctx, worker)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWorker indicates an expected call of SaveWorker.
func (mr *MockUserMockRecorder) SaveWorker(ctx, worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWorker", reflect.TypeOf((*MockUser)(nil).SaveWorker), ctx, worker)
}

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// GetLastOrderByCustomerID mocks base method.
func (m *MockOrder) GetLastOrderByCustomerID(ctx context.Context, customerID string) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOrderByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOrderByCustomerID indicates an expected call of GetLastOrderByCustomerID.
func (mr *MockOrderMockRecorder) GetLastOrderByCustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOrderByCustomerID", reflect.TypeOf((*MockOrder)(nil).GetLastOrderByCustomerID), ctx, customerID)
}

// GetOrderByNanoIDAt mocks base method.
func (m *MockOrder) GetOrderByNanoIDAt(ctx context.Context, nanoID string, from, to time.Time) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNanoIDAt", ctx, nanoID, from, to)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNanoIDAt indicates an expected call of GetOrderByNanoIDAt.
func (mr *MockOrderMockRecorder) GetOrderByNanoIDAt(ctx, nanoID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNanoIDAt", reflect.TypeOf((*MockOrder)(nil).GetOrderByNanoIDAt), ctx, nanoID, from, to)
}

// SaveOrder mocks base method.
func (m *MockOrder) SaveOrder(ctx context.Context, order domain.Order) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrder)(nil).SaveOrder), ctx, order)
}
